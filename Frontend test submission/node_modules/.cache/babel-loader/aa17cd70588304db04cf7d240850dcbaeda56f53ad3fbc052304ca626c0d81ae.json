{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soham\\\\Downloads\\\\frontend\\\\src\\\\logging\\\\LoggerProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoggerContext = /*#__PURE__*/createContext(_c = () => {});\n_c2 = LoggerContext;\nexport const LoggerProvider = ({\n  children\n}) => {\n  const client = axios.create({\n    baseURL: process.env.REACT_APP_LOG_BASE_URL || 'http://localhost:4500',\n    timeout: 4000\n  });\n  const log = async (event, payload = {}) => {\n    try {\n      await client.post('/logs', {\n        event,\n        payload,\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      });\n    } catch (e) {\n      // intentionally swallow errors — logging must not break UX\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(LoggerContext.Provider, {\n    value: log,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_c3 = LoggerProvider;\nexport const useLogger = () => {\n  _s();\n  return useContext(LoggerContext);\n};\n_s(useLogger, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LoggerContext$createContext\");\n$RefreshReg$(_c2, \"LoggerContext\");\n$RefreshReg$(_c3, \"LoggerProvider\");","map":{"version":3,"names":["React","createContext","useContext","axios","jsxDEV","_jsxDEV","LoggerContext","_c","_c2","LoggerProvider","children","client","create","baseURL","process","env","REACT_APP_LOG_BASE_URL","timeout","log","event","payload","post","timestamp","Date","toISOString","userAgent","navigator","e","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c3","useLogger","_s","$RefreshReg$"],"sources":["C:/Users/soham/Downloads/frontend/src/logging/LoggerProvider.jsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\nimport axios from 'axios';\n\nconst LoggerContext = createContext(() => {});\n\nexport const LoggerProvider = ({ children }) => {\n  const client = axios.create({\n    baseURL: process.env.REACT_APP_LOG_BASE_URL || 'http://localhost:4500',\n    timeout: 4000\n  });\n\n  const log = async (event, payload = {}) => {\n    try {\n      await client.post('/logs', {\n        event,\n        payload,\n        timestamp: new Date().toISOString(),\n        userAgent: navigator.userAgent\n      });\n    } catch (e) {\n      // intentionally swallow errors — logging must not break UX\n    }\n  };\n\n  return (\n    <LoggerContext.Provider value={log}>\n      {children}\n    </LoggerContext.Provider>\n  );\n};\n\nexport const useLogger = () => useContext(LoggerContext);\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AACxD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,gBAAGL,aAAa,CAAAM,EAAA,GAACA,CAAA,KAAM,CAAC,CAAC,CAAC;AAACC,GAAA,GAAxCF,aAAa;AAEnB,OAAO,MAAMG,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC9C,MAAMC,MAAM,GAAGR,KAAK,CAACS,MAAM,CAAC;IAC1BC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,uBAAuB;IACtEC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAAA,CAAOC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACzC,IAAI;MACF,MAAMT,MAAM,CAACU,IAAI,CAAC,OAAO,EAAE;QACzBF,KAAK;QACLC,OAAO;QACPE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,SAAS,EAAEC,SAAS,CAACD;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOE,CAAC,EAAE;MACV;IAAA;EAEJ,CAAC;EAED,oBACEtB,OAAA,CAACC,aAAa,CAACsB,QAAQ;IAACC,KAAK,EAAEX,GAAI;IAAAR,QAAA,EAChCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACC,GAAA,GAxBWzB,cAAc;AA0B3B,OAAO,MAAM0B,SAAS,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMlC,UAAU,CAACI,aAAa,CAAC;AAAA;AAAC8B,EAAA,CAA5CD,SAAS;AAAA,IAAA5B,EAAA,EAAAC,GAAA,EAAA0B,GAAA;AAAAG,YAAA,CAAA9B,EAAA;AAAA8B,YAAA,CAAA7B,GAAA;AAAA6B,YAAA,CAAAH,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}